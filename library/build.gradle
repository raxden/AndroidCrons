apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'

group = rootProject.ext.androidGroup
version = rootProject.ext.androidVersionLibrary

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("compileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("buildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("minSdkVersion")
        targetSdkVersion globalConfiguration.getAt("targetSdkVersion")

        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')

    def raxdenStudiosDependencies = rootProject.ext.raxdenStudiosDependencies
    def appDependencies = rootProject.ext.appDependencies

    compile raxdenStudiosDependencies.commons

    compile appDependencies.reactiveAndroid
    compile appDependencies.reactiveJava
    compile appDependencies.parceler
    apt     appDependencies.parcelerAPT

    testCompile  dataTestDependencies.junit
    testCompile  dataTestDependencies.assertj
    testCompile  dataTestDependencies.mockito
    testCompile  dataTestDependencies.robolectric
    testCompile  dataTestDependencies.robolectricShadows
    testCompile  dataTestDependencies.powermockJunit
    testCompile  dataTestDependencies.powermockJunitRule
    testCompile  dataTestDependencies.powermockAPI
    testCompile  dataTestDependencies.powermockXtream

    androidTestCompile 'com.android.support.test:runner:0.4.1'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    // Set this dependency to build and run Espresso tests
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}