// v1.0.5

task fetchFromGit(type: Exec) {
    description 'Fetch git.'
    commandLine "git", "fetch"
}

task addToGit(type: Exec) {
    description 'Add git.'
    commandLine "git", "add", "-A"
}

task pushToGit(type: Exec) {
    description 'Push git.'
    commandLine "git", "push"
}

task uploadLibraryWithMessage {
    doFirst {
        def message = "$message"
        createUploadLibraryToGitTask(message)
    }
    doLast {
        tasks.uploadLibraryToGit.execute()
    }
}

task increaseLibraryVersion {
    doFirst {
        def versionName = increaseBuildVersion()
        createUpdateReadmeFileTask(versionName)
    }
    dependsOn updateReadmeFile
//    createCommitToGitWithMessageTask("Build version increased (" + versionName + ")")
//    createTagToGitTask(versionName, "Release candidate")
//    createPushTagToGitTask(versionName)
//    println(":increaseLibraryVersion - Incrementing library version...")
//    println(":increaseLibraryVersion - Upload new library version to repository...")
//    dependsOn updateReadmeFile
//    dependsOn addToGit
//    dependsOn commitToGitWithMessage
//    dependsOn pushToGit
//    dependsOn createTagToGit
//    dependsOn pushTagToGit
//    println(":increaseBuildVersion - Library version incremented to " + versionName)
}

task uploadLibrary {
    doFirst {
        createUploadLibraryToGitTask("Upload library (" + version + ")")
    }
    doLast {
        tasks.uploadLibraryToGit.execute()
    }
}

task uploadRelease {
    doFirst {
        createUploadReleaseToGitTask(version, "Release " + version + " created")
    }
    doLast {
        println(":uploadRelease - Upload release to repository...")
        tasks.uploadReleaseToGit.execute()
        println(":uploadRelease - Release uploaded: " + version)
    }
}

def createCommitToGitWithMessageTask(message) {
    return tasks.create(name: 'commitToGitWithMessage', type: Exec) {
        description "Commit git."
        commandLine "git", "commit", "-m", message
    }
}

def createTagToGitTask(tag, message) {
    return tasks.create(name: 'createTagToGit', type: Exec) {
        description "Tag git."
        commandLine "git", "tag", "-a", tag, "-m", message
    }
}

def createPushTagToGitTask(tag) {
    return tasks.create(name: 'pushTagToGit', type: Exec) {
        description "Push tag to git."
        commandLine "git", "push", "origin", tag
    }
}

def createUpdateReadmeTask(versionName) {
    return tasks.create(name: 'updateReadme') {
        doFirst {
            println(":updateReadmeFile - Updating readme file...")
            def readmeFile = file('README.md')
            if (readmeFile.exists()) {
                readmeFile.delete()
            }
            def readmeTemplateFile = file('README.template')
            if (readmeTemplateFile.canRead()) {
                def content = readmeTemplateFile.getText("UTF-8").replaceAll("\\{versionName\\}", versionName)
                readmeFile = new File("README.md")
                readmeFile.createNewFile()
                readmeFile.write(content, "UTF-8")
            }
            println(":updateReadmeFile - Readme file has been update")
        }
    }
}