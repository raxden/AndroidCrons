// v1.0.5
import java.util.regex.Pattern

task fetchFromGit(type: Exec) {
    description 'Fetch git.'
    commandLine "git", "fetch"
}

task pullFromGit(type: Exec) {
    description 'Pulls git.'
    commandLine "git", "pull"
}

task addToGit(type: Exec) {
    description 'Add git.'
    commandLine "git", "add", "-A"
}

task commitToGit(type: Exec) {
    description 'Commit git.'
    commandLine "git", "commit"
}

task pushToGit(type: Exec) {
    description 'Push git.'
    commandLine "git", "push"
}

project.ext.libraryVersion = ""

task increaseLibraryVersion() {
    doFirst {
        println(":increaseLibraryVersion - Incrementing library version...")
        project.ext.libraryVersion = increaseLibraryVersion()
        println(":increaseLibraryVersion - Library version incremented to " + project.ext.libraryVersion)
    }
}

task deployLibrary() {
    doFirst {
        println(":deployLibrary - Library version: " + project.ext.libraryVersion)
    }
    dependsOn(fetchFromGit)
    dependsOn(pullFromGit)
    dependsOn(increaseLibraryVersion)
    dependsOn(addToGit)
    dependsOn(commitToGit)

    pullFromGit.mustRunAfter fetchFromGit
    increaseLibraryVersion.mustRunAfter pullFromGit
    addToGit.mustRunAfter increaseLibraryVersion
    commitToGit.mustRunAfter addToGit
}

String increaseLibraryVersion() {
    def versionName
    def gradlePropsFile = file('gradle.properties')
    if (gradlePropsFile.isFile() && gradlePropsFile.canRead()) {
        FileInputStream fis = new FileInputStream(gradlePropsFile)
        Properties versionProps = new Properties()
        versionProps.load(fis)
        versionName = versionProps['VERSION_NAME']
        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)")
        def matcherVersionNumber = patternVersionNumber.matcher(versionName)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def buildVersion = Integer.parseInt(matcherVersionNumber.group(3)) + 1
            versionName = majorVersion + "." + minorVersion + "." + buildVersion
            versionProps['VERSION_NAME'] = matcherVersionNumber.replaceAll(versionName)
        }
        versionProps.store(gradlePropsFile.newWriter(), null)
        fis.close()
    } else {
        throw new GradleException(":increaseBuildVersion - Could not read version.properties!")
    }
    return versionName
}